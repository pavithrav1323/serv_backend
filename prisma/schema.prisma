// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  phone       String?  @unique
  password    String
  firstName   String
  lastName    String
  role        UserRole @default(EMPLOYEE)
  isActive    Boolean  @default(true)
  avatar      String?
  faceTemplate String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  attendances Attendance[]
  requests    Request[]
  tasks       Task[]
  teamMembers TeamMember[]
  reports     Report[]
  rewards     Reward[]
  createdTasks Task[] @relation("TaskCreator")
  createdTeams Team[] @relation("TeamCreator")

  @@map("users")
}

model Attendance {
  id          String   @id @default(cuid())
  userId      String
  checkIn     DateTime
  checkOut    DateTime?
  shift       String?
  location    String?
  latitude    Float?
  longitude   Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendances")
}

model Request {
  id          String      @id @default(cuid())
  userId      String
  type        RequestType
  title       String
  description String?
  status      RequestStatus @default(PENDING)
  startDate   DateTime?
  endDate     DateTime?
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("requests")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  assignedTo  String?
  createdBy   String
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  assignedUser User?      @relation(fields: [assignedTo], references: [id])
  creator      User       @relation("TaskCreator", fields: [createdBy], references: [id])

  @@map("tasks")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdBy   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation("TeamCreator", fields: [createdBy], references: [id])
  members     TeamMember[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // Relations
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model Report {
  id          String      @id @default(cuid())
  userId      String
  type        ReportType
  title       String
  content     String
  status      ReportStatus @default(DRAFT)
  submittedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Reward {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  description String?
  points      Int?
  redeemedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rewards")
}

model Shift {
  id          String   @id @default(cuid())
  name        String
  startTime   DateTime?
  endTime     DateTime?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("shifts")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum RequestType {
  LEAVE
  OVERTIME
  SICK_LEAVE
  VACATION
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TeamRole {
  LEADER
  MEMBER
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  INCIDENT
  PERFORMANCE
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}
